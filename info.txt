Recursive dependency problem:

package q where
    A :: [ ... ]
    B = [ ... ]

package p where
    include q
    A = [ import B ; ... ]

What is the package key of q in this instantiation?
Included in it should be A -> p_KEY:A.

What is the package key of p?  According to the current
algorithm, it includes the package keys of ALL PACKAGES IT INCLUDES.

CIRCULARITY.

Workaround:
    full transitive: this precludes multiple versions of same package coexisting in package
    extra "version hash". Should work, need to store it as extra data in the package db (YET ANOTHER ID)

Does the mu trick solve the problem?
    no, but only because there's no "recursion" to be done

----

foo-0.1
ModName foo_PKGKEY:RealName
ModName2 foo_PKGKEY:RealName
foo_PKGKEY
foo2_PKGKEY

----

we have to talk about package distribution EVENTUALLY
    where to draw the line? matter of taste
    for Backpack, we do it because it's in Haskell
    also, you need this modularity precisely for things on different sides of the planet so that's what Hackage is for

sounds simple but is complicated
    (the PhD problem is in reverse)
    generative applicative / it depends on what you expect
    module level granularity is a compromise

docs
    example
        top-level
X           vanilla
X               point out that p and q could be in the single bkp, or separate
X           package with hole
        each section
        2.6 mention pkgdb_field
            bin-package-db
    "installed-ids" in field grammar versus "id"
    Cabal wants to find as many installed things as possible
        Cabal indiscriminately says what is installed
            but this is not necessary UNLESS there can be multiple ipids per package key
    package ::= installed package | package
    Cabal can put one or lots of packages in one
        lens-linked/lens
        distinguish with the Cabal selection for a signature

comments in GhcMonad.hs
    Session is an IORef to HscEnv (HscEnv is like Session: fix this)

FinderCache should record what the package it is from
    it does seem like hsc_MLC and hsc_FC are updated together (a pair)
    so call the combined thing FinderCache

We're not caching file system information for packages at all!

goal: abandon FinderCache, by storing home package stuff <thisPackage, moduleName>

----

FinderCache in hsc_FC (home package only)
    ModuleName -> FindResult

ModLocationCache in hsc_MLC
    Module -> ModLocation
    modLocationCache
        findPackageModule

Both
    homeSearchCache (to MLC if it is found)
    addHomeModuleToFinder
        summariseFile (batch compilation)
        runPhase (Hsc ...) (one shot)
    uncacheModule
        summariseModule (when a source file disappeared)

flushFinderCaches: when working directory changes
    clears all of FinderCache, home modules only from ModLocationCache
